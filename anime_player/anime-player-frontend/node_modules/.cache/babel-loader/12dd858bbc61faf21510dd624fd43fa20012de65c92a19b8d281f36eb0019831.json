{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dylam\\\\Desktop\\\\django react\\\\anime_player\\\\anime-player-frontend\\\\src\\\\components\\\\SearchAnime.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimeSearch = () => {\n  _s();\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Para el nombre del anime\n  const [animeList, setAnimeList] = useState([]); // Para la lista de resultados\n  const [loading, setLoading] = useState(false); // Estado de carga\n\n  const handleSearch = async () => {\n    if (searchQuery.trim() === \"\") {\n      alert(\"Por favor ingresa un nombre de anime.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/anime/search/${searchQuery}`);\n      const data = await response.json();\n      if (response.ok) {\n        setAnimeList(data.animes); // Suponiendo que el backend envíe una lista de animes\n      } else {\n        alert(data.error || \"No se encontraron animes.\");\n      }\n    } catch (error) {\n      console.error(\"Error al buscar el anime:\", error);\n      alert(\"Hubo un problema al buscar el anime.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  fetch(`http://localhost:8000/api/anime/search/${animeName}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Escribe el nombre del anime...\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      disabled: loading,\n      children: loading ? \"Buscando...\" : \"Buscar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), animeList.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Resultados:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: animeList.map((anime, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: anime.link,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: anime.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimeSearch, \"q9I7iGRdNxC1wdT4+teiv+dI6hM=\");\n_c = AnimeSearch;\nexport default AnimeSearch;\nvar _c;\n$RefreshReg$(_c, \"AnimeSearch\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AnimeSearch","_s","searchQuery","setSearchQuery","animeList","setAnimeList","loading","setLoading","handleSearch","trim","alert","response","fetch","data","json","ok","animes","error","console","animeName","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","map","anime","index","href","link","rel","name","_c","$RefreshReg$"],"sources":["C:/Users/dylam/Desktop/django react/anime_player/anime-player-frontend/src/components/SearchAnime.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AnimeSearch = () => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");  // Para el nombre del anime\r\n  const [animeList, setAnimeList] = useState([]);      // Para la lista de resultados\r\n  const [loading, setLoading] = useState(false);       // Estado de carga\r\n\r\n  const handleSearch = async () => {\r\n    if (searchQuery.trim() === \"\") {\r\n      alert(\"Por favor ingresa un nombre de anime.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`/api/anime/search/${searchQuery}`);\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setAnimeList(data.animes);  // Suponiendo que el backend envíe una lista de animes\r\n      } else {\r\n        alert(data.error || \"No se encontraron animes.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al buscar el anime:\", error);\r\n      alert(\"Hubo un problema al buscar el anime.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\nfetch(`http://localhost:8000/api/anime/search/${animeName}`)\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Escribe el nombre del anime...\"\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch} disabled={loading}>\r\n        {loading ? \"Buscando...\" : \"Buscar\"}\r\n      </button>\r\n\r\n      {animeList.length > 0 && (\r\n        <div>\r\n          <h3>Resultados:</h3>\r\n          <ul>\r\n            {animeList.map((anime, index) => (\r\n              <li key={index}>\r\n                <a href={anime.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {anime.name}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimeSearch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}